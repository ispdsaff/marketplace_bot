from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import ContextTypes
from db import get_user, decrement_requests
import os
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")


async def review_handler(update: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "review_menu":
        context.user_data["state"] = "review_prepare"
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ üßæ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n\n"
            "–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä:\n\n"
            "*–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Puma RS-X*\n–û—á–µ–Ω—å —É–¥–æ–±–Ω—ã–µ, –Ω–æ –ø—Ä–∏—à–ª–∏ –±–µ–∑ —à–Ω—É—Ä–∫–æ–≤.",
            parse_mode="Markdown"
        )

    elif query.data == "review_menu_again":
        context.user_data["state"] = "review_prepare"
        await query.edit_message_text(
            "–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ üìù"
        )


async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    state = context.user_data.get("state")

    if state != "review_prepare":
        return

    if user["tariff"] == "free" and user["requests_left"] <= 0:
        await update.message.reply_text(
            "üòî –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            "–ü–æ–¥–∫–ª—é—á–∏ –ø—Ä–µ–º–∏—É–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ç–∞—Ä–∏—Ñ—ã", callback_data="menu_pricing")]
            ])
        )
        return

    text = update.message.text.strip()
    parts = text.split("\n", 1)

    if len(parts) < 2:
        await update.message.reply_text(
            "–•–º‚Ä¶ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∫–∞–∑–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üßê\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*, –∏ *—Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞* –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            parse_mode="Markdown"
        )
        return

    product_name, review_text = parts[0].strip(), parts[1].strip()

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n"
        f"–û—Ç–∑—ã–≤: {review_text}\n\n"
        f"–°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–æ—Ç—É –æ –∫–ª–∏–µ–Ω—Ç–µ, –∏ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É–≤–∏–¥–µ–ª–∏, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü ‚Äî –ø—Ä–æ—Ñ–∏."
    )

    await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –∏–¥–µ–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º‚Ä¶ üí¨‚è≥")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=300
        )
        result = response["choices"][0]["message"]["content"]
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    if user["tariff"] == "free":
        decrement_requests(user_id)

    user = get_user(user_id)
    left = user["requests_left"] if user["tariff"] == "free" else "‚àû"

    result_text = f"–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üëá\n\n{result}\n\n–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {left}"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="review_menu")],
        [InlineKeyboardButton("‚ôªÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data="review_menu_again")],
        [InlineKeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")]
    ])

    await update.message.reply_text(result_text, reply_markup=keyboard)