from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import ContextTypes
from db import get_user, decrement_requests
from prompts import generate_title_prompt, generate_description_prompt
import os
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")


async def generation_handler(update: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "gen_menu":
        context.user_data["state"] = None
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", callback_data="gen_title")],
            [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", callback_data="gen_description")],
            [InlineKeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")]
        ])
        await query.edit_message_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç. –≠—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ –¢–û–ü –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏.\n\n"
            "–ß—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞? üöÄ",
            reply_markup=keyboard
        )

    elif query.data in ["gen_title", "gen_description"]:
        context.user_data["state"] = query.data
        label = "–Ω–∞–∑–≤–∞–Ω–∏–µ" if query.data == "gen_title" else "–æ–ø–∏—Å–∞–Ω–∏–µ"
        await query.edit_message_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º SEO-{label}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ üîß\n\n"
            "_–ü—Ä–∏–º–µ—Ä: ¬´–£–¥–æ–±–Ω—ã–π —Ä—é–∫–∑–∞–∫, –≤–æ–¥–æ–æ—Ç—Ç–∞–ª–∫–∏–≤–∞—é—â–∏–π, –¥–ª—è –≥–æ—Ä–æ–¥–∞¬ª_",
            parse_mode="Markdown"
        )


async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    text = update.message.text.strip()
    state = context.user_data.get("state")

    if state not in ["gen_title", "gen_description"]:
        return

    if user["tariff"] == "free" and user["requests_left"] <= 0:
        await update.message.reply_text(
            "üòî –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            "–ü–æ–¥–∫–ª—é—á–∏ –ø—Ä–µ–º–∏—É–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ç–∞—Ä–∏—Ñ—ã", callback_data="menu_pricing")]
            ])
        )
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º—Ç–∞
    if state == "gen_title":
        prompt = generate_title_prompt(text, user["marketplace"])
    else:
        prompt = generate_description_prompt(text, user["marketplace"])

    await update.message.reply_text("–°–µ–∫—É–Ω–¥—É‚Ä¶ –¥—É–º–∞—é –Ω–∞–¥ –ª—É—á—à–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º ‚è≥")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=500
        )
        result = response["choices"][0]["message"]["content"]
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return

    # –£—á—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if user["tariff"] == "free":
        decrement_requests(user_id)

    user = get_user(user_id)  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    left = user["requests_left"] if user["tariff"] == "free" else "‚àû"
    result_message = f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{result}\n\n–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {left}"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=state)],
        [InlineKeyboardButton("‚ôªÔ∏è –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="gen_menu")],
        [InlineKeyboardButton("üìä –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ç–∞—Ä–∏—Ñ—ã", callback_data="menu_pricing")],
        [InlineKeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")]
    ])

    await update.message.reply_text(result_message, reply_markup=keyboard)